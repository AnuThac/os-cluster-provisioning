---
- name: "Scaling worker nodes"
  hosts: localhost
  connection: local
  vars_files:
    - /home/ubuntu/os-cluster-provisioning/scale-up/scale-vars
  environment:
    KUBECONFIG: "{{ cluster_name }}"

  tasks:
    - name: "copying kubeconfig file and connecting to cluster"
      ansible.builtin.shell: |
        aws s3 cp 's3://openshift-ansible/{{ provider }}/{{ cluster_name }}/auth/kubeconfig' $KUBECONFIG

    - name: "getting machinesets"
      ansible.builtin.shell: |
        oc get machinesets -n openshift-machine-api -o jsonpath='{range .items[*]}[{.metadata.name}]={.status.replicas}{"\t"}'
      register: machinesets

    
    - name: "equally distributing"
      ansible.builtin.shell: |
        declare -A machinesets=( {{ machinesets.stdout }} )
        max=$(echo ${machinesets[@]} | tr " " "\n" | sort -nr | head -n1)

        req={{ scale_up_count }}

        while [[ ${req} -gt 0 ]]; do
          count=0
          for machineset in ${!machinesets[@]}; do
            if [[ (${machinesets[${machineset}]} -lt ${max}) && (${req} -ne 0) ]]; then
              machinesets[${machineset}]=$(( ${machinesets[${machineset}]} + 1 ))
              req=$(( ${req} - 1 ))
            else
              count=$(( ${count} + 1 ))
            fi
          done

          if [[ (${count} -eq ${{ "{" }}{{ "#" }}machinesets[@]}) && (${req} -ne 0) ]]; then
            for machineset in ${!machinesets[@]}; do
              if [[ ${req} -ne 0 ]]; then
                machinesets[${machineset}]=$(( ${machinesets[${machineset}]} + 1 ))
                req=$(( ${req} - 1 ))
              fi
            done
          fi
        done

        for machineset in "${!machinesets[@]}"; do
          echo ${machineset}: ${machinesets[${machineset}]}
        done
      args:
        executable: /bin/bash
      register: updated_machinesets

    - name: "scale machineset"
      ansible.builtin.shell: |
        oc scale --replicas={{ item.value }} machineset {{ item.key }} -n  openshift-machine-api
      with_dict: "{{ updated_machinesets.stdout | from_yaml }}"

    - name: "remove kubeconfig from controller node"
      ansible.builtin.file:
        path: $KUBECONFIG
        state: absent
